Interpreter Pattern(解释器模式)：给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。
实际开发中使用比较少。

优点：
    扩展性

缺点：
    引起类膨胀
    采用递归调用方法
    效率问题

使用场景：
    重复发生的问题可以使用解释器模式
    一个简单语法需要解释的场景

注意事项：
    尽量不要在重要的模块中使用解释器模式，否则维护会是一个很大的问题。可以使用shell、JRuby、Groovy等脚本语言来代替解释器模式，弥补java编译型语言的不足。